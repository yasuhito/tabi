#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end


require "rubygems"

$LOAD_PATH.unshift File.expand_path( File.join File.dirname( __FILE__ ), "..", "lib" )
$LOAD_PATH.unshift File.expand_path( File.join File.dirname( __FILE__ ), ".." )

require "config"
require "gli"
require "tabi_version"
require "user-db"


include GLI


program_desc "tabi クラウドルータ管理コマンド"

version Tabi::VERSION


desc "接続許可待ちのユーザを表示"
long_desc """
インターネットへの接続許可待ちのユーザ一覧を表示する。
ユーザは allow コマンドで接続を許可、または deny コマンドで禁止することができる。
"""
command :pending do | c |
  c.action do | global_options, options, args |
    # If you have any errors, just raise them
    # raise "that command made no sense"
    #
    # [TODO] 余計な引数が与えられたときのエラー処理
    if args.empty?
      Dir.glob( File.join( pending_dir, "*" ) ).each do | each |
        puts File.basename( each )
      end
    else
      args.each do | each |
        FileUtils.touch File.join( pending_dir, each )
      end
    end
  end
end


desc "ユーザの接続を許可"
long_desc """
指定したユーザのインターネット接続を許可する。
"""
arg_name "user_mac_address ..."
command :allow do | c |
  c.action do | global_options, options, args |
    if args.empty?
      Dir.glob( File.join( allow_dir, "*" ) ).each do | each |
        puts File.basename( each )
      end
    else
      args.each do | each |
        # [TODO] 指定された MAC アドレスが無かったときのエラー処理
        FileUtils.mv File.join( pending_dir, each ), allow_dir
      end
    end
  end
end


desc "ユーザの接続を禁止"
long_desc """
指定したユーザのインターネット接続を禁止する。
"""
arg_name "user_mac_address ..."
command :deny do | c |
  c.action do | global_options, options, args |
    if args.empty?
      Dir.glob( File.join( deny_dir, "*" ) ).each do | each |
        puts File.basename( each )
      end
    else
      args.each do | each |
        # [TODO] 指定された MAC アドレスが無かったときのエラー処理
        FileUtils.mv File.join( pending_dir, each ), deny_dir
      end
    end
  end
end


pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end


exit GLI.run(ARGV)
